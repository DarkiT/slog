name: 代码质量与安全检查

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    # 每周一凌晨 3 点运行完整质量检查
    - cron: '0 3 * * 1'
  workflow_dispatch:

env:
  GO_VERSION: '1.23'

jobs:
  # 静态代码分析
  static-analysis:
    name: 静态代码分析
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 安装分析工具
        run: |
          # 安装静态分析工具
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
          go install github.com/gordonklaus/ineffassign@latest
          go install github.com/client9/misspell/cmd/misspell@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: 代码复杂度检查
        run: |
          echo "=== 代码复杂度分析 ===" > quality-report.txt
          gocyclo -over 15 . >> quality-report.txt || true
          echo "" >> quality-report.txt

      - name: 无效赋值检查
        run: |
          echo "=== 无效赋值检查 ===" >> quality-report.txt
          ineffassign . >> quality-report.txt || true
          echo "" >> quality-report.txt

      - name: 拼写检查
        run: |
          echo "=== 拼写检查 ===" >> quality-report.txt
          misspell . >> quality-report.txt || true
          echo "" >> quality-report.txt

      - name: Staticcheck 检查
        run: |
          echo "=== Staticcheck 分析 ===" >> quality-report.txt
          staticcheck ./... >> quality-report.txt || true
          echo "" >> quality-report.txt

      - name: 上传质量分析报告
        uses: actions/upload-artifact@v4
        with:
          name: quality-analysis-report
          path: quality-report.txt

  # 安全漏洞扫描
  security-scan:
    name: 安全漏洞扫描
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 运行 Gosec 安全扫描
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt json -out gosec-report.json ./...
          gosec -fmt text -out gosec-report.txt ./...

      - name: 生成安全报告摘要
        run: |
          echo "## 安全扫描报告" > security-summary.md
          echo "" >> security-summary.md

          # 统计漏洞数量
          if [ -f gosec-report.json ]; then
            HIGH=$(jq '[.Issues[] | select(.severity=="HIGH")] | length' gosec-report.json 2>/dev/null || echo "0")
            MEDIUM=$(jq '[.Issues[] | select(.severity=="MEDIUM")] | length' gosec-report.json 2>/dev/null || echo "0")
            LOW=$(jq '[.Issues[] | select(.severity=="LOW")] | length' gosec-report.json 2>/dev/null || echo "0")

            echo "### 漏洞统计" >> security-summary.md
            echo "- 高危漏洞: $HIGH" >> security-summary.md
            echo "- 中危漏洞: $MEDIUM" >> security-summary.md
            echo "- 低危漏洞: $LOW" >> security-summary.md
            echo "" >> security-summary.md
          fi

          echo "### 详细报告" >> security-summary.md
          echo '```' >> security-summary.md
          head -50 gosec-report.txt >> security-summary.md 2>/dev/null || echo "无安全问题发现" >> security-summary.md
          echo '```' >> security-summary.md

      - name: 上传安全扫描结果
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            gosec-report.json
            gosec-report.txt
            security-summary.md

      - name: 安全扫描失败检查
        run: |
          if [ -f gosec-report.json ]; then
            HIGH=$(jq '[.Issues[] | select(.severity=="HIGH")] | length' gosec-report.json 2>/dev/null || echo "0")
            if [ "$HIGH" -gt "0" ]; then
              echo "❌ 发现 $HIGH 个高危安全漏洞！"
              exit 1
            fi
          fi

  # 依赖漏洞检查
  dependency-check:
    name: 依赖漏洞检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 运行 Go 漏洞扫描
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest

          # 扫描主模块
          echo "=== 主模块依赖漏洞扫描 ===" > dependency-vulnerabilities.txt
          govulncheck ./... >> dependency-vulnerabilities.txt 2>&1 || true

          # 扫描基准测试模块
          echo "" >> dependency-vulnerabilities.txt
          echo "=== 基准测试模块依赖漏洞扫描 ===" >> dependency-vulnerabilities.txt
          cd benchmark && govulncheck ./... >> ../dependency-vulnerabilities.txt 2>&1 || true

      - name: 检查依赖许可证
        run: |
          go install github.com/fossa-contrib/fossa-cli@latest || echo "Fossa CLI 安装失败，跳过许可证检查"

          echo "" >> dependency-vulnerabilities.txt
          echo "=== 依赖许可证信息 ===" >> dependency-vulnerabilities.txt
          go mod download -json | jq -r '.Module + "@" + .Version' >> dependency-vulnerabilities.txt 2>/dev/null || echo "许可证检查需要手动执行" >> dependency-vulnerabilities.txt

      - name: 上传依赖检查报告
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-vulnerabilities.txt

  # DLP 模块安全专项检查
  dlp-security-check:
    name: DLP 模块安全专项检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: DLP 功能安全测试
        run: |
          echo "=== DLP 模块安全测试 ===" > dlp-security-report.txt

          # 运行 DLP 安全相关测试
          go test -v -run="Security" ./dlp/... >> dlp-security-report.txt 2>&1 || true

          echo "" >> dlp-security-report.txt
          echo "=== DLP 脱敏功能验证 ===" >> dlp-security-report.txt
          go test -v -run="Desensitiz" ./dlp/... >> dlp-security-report.txt 2>&1 || true

          echo "" >> dlp-security-report.txt
          echo "=== DLP 正则表达式安全检查 ===" >> dlp-security-report.txt
          go test -v -run="Regex" ./dlp/... >> dlp-security-report.txt 2>&1 || true

      - name: 检查敏感数据泄露
        run: |
          echo "" >> dlp-security-report.txt
          echo "=== 代码中敏感信息检查 ===" >> dlp-security-report.txt

          # 检查可能的敏感信息泄露
          grep -r -n -i "password\|secret\|key\|token" . --include="*.go" --exclude-dir=".git" >> dlp-security-report.txt || echo "未发现明显的敏感信息泄露" >> dlp-security-report.txt

      - name: 上传 DLP 安全报告
        uses: actions/upload-artifact@v4
        with:
          name: dlp-security-report
          path: dlp-security-report.txt

  # 代码质量汇总
  quality-summary:
    name: 代码质量汇总
    runs-on: ubuntu-latest
    needs: [static-analysis, security-scan, dependency-check, dlp-security-check]
    if: always()
    steps:
      - name: 下载所有质量报告
        uses: actions/download-artifact@v4

      - name: 生成质量汇总报告
        run: |
          echo "# 代码质量与安全检查汇总报告" > final-quality-report.md
          echo "" >> final-quality-report.md
          echo "## 检查项目概览" >> final-quality-report.md
          echo "" >> final-quality-report.md

          # 检查各个步骤的状态
          if [ -d "quality-analysis-report" ]; then
            echo "✅ 静态代码分析完成" >> final-quality-report.md
          else
            echo "❌ 静态代码分析失败" >> final-quality-report.md
          fi

          if [ -d "security-scan-results" ]; then
            echo "✅ 安全漏洞扫描完成" >> final-quality-report.md
          else
            echo "❌ 安全漏洞扫描失败" >> final-quality-report.md
          fi

          if [ -d "dependency-check-report" ]; then
            echo "✅ 依赖漏洞检查完成" >> final-quality-report.md
          else
            echo "❌ 依赖漏洞检查失败" >> final-quality-report.md
          fi

          if [ -d "dlp-security-report" ]; then
            echo "✅ DLP 模块安全检查完成" >> final-quality-report.md
          else
            echo "❌ DLP 模块安全检查失败" >> final-quality-report.md
          fi

          echo "" >> final-quality-report.md
          echo "## 建议" >> final-quality-report.md
          echo "- 定期更新依赖版本" >> final-quality-report.md
          echo "- 修复发现的安全漏洞" >> final-quality-report.md
          echo "- 降低代码复杂度" >> final-quality-report.md
          echo "- 持续关注 DLP 模块的安全性" >> final-quality-report.md

      - name: 上传汇总报告
        uses: actions/upload-artifact@v4
        with:
          name: final-quality-report
          path: final-quality-report.md