name: 发布版本

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: v0.1.1)'
        required: true
        type: string
      pre_release:
        description: '是否为预发布版本'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: '1.23'

jobs:
  # 版本验证
  validate:
    name: 版本验证
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is_prerelease: ${{ steps.get_version.outputs.is_prerelease }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取版本信息
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.pre_release }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
            IS_PRERELEASE=false
            # 检查是否为预发布版本 (包含 alpha, beta, rc)
            if [[ $VERSION =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE=true
            fi
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "发布版本: $VERSION"
          echo "是否预发布: $IS_PRERELEASE"

      - name: 验证版本格式
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "❌ 版本号格式不正确: $VERSION"
            echo "正确格式: v1.2.3 或 v1.2.3-alpha.1"
            exit 1
          fi

  # 构建和测试
  build-and-test:
    name: 构建和测试
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [amd64, arm64]
        exclude:
          # Windows on ARM64 需要特殊处理
          - os: windows-latest
            arch: arm64
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 运行测试
        run: |
          go test -race -covermode=atomic ./...

      - name: 构建二进制文件
        env:
          GOOS: ${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'windows-latest' && 'windows' || 'darwin' }}
          GOARCH: ${{ matrix.arch }}
          VERSION: ${{ needs.validate.outputs.version }}
        run: |
          # 设置构建变量
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GIT_COMMIT=$(git rev-parse --short HEAD)

          # 构建主程序
          CGO_ENABLED=0 go build -ldflags="-w -s -X main.version=$VERSION -X main.buildTime=$BUILD_TIME -X main.gitCommit=$GIT_COMMIT" -o slog${{ matrix.os == 'windows-latest' && '.exe' || '' }} .

          # 创建发布目录
          mkdir -p dist
          RELEASE_NAME="slog-$VERSION-$GOOS-$GOARCH"
          mkdir -p dist/$RELEASE_NAME

          # 复制文件到发布目录
          cp slog${{ matrix.os == 'windows-latest' && '.exe' || '' }} dist/$RELEASE_NAME/
          cp README.md dist/$RELEASE_NAME/
          cp example/README.md dist/$RELEASE_NAME/EXAMPLE.md

          # 创建压缩包
          cd dist
          if [ "$GOOS" = "windows" ]; then
            zip -r $RELEASE_NAME.zip $RELEASE_NAME/
          else
            tar -czf $RELEASE_NAME.tar.gz $RELEASE_NAME/
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*.{tar.gz,zip}

  # 生成变更日志
  changelog:
    name: 生成变更日志
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 生成变更日志
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          # 获取上一个版本标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          echo "## 🚀 $VERSION 版本更新" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "### 📋 变更概要" >> CHANGELOG.md
            echo "" >> CHANGELOG.md

            # 按类型分类提交
            echo "#### ✨ 新增功能" >> CHANGELOG.md
            git log $PREVIOUS_TAG..HEAD --oneline --grep="^feat" --format="- %s" >> CHANGELOG.md || echo "- 无新增功能" >> CHANGELOG.md
            echo "" >> CHANGELOG.md

            echo "#### 🐛 问题修复" >> CHANGELOG.md
            git log $PREVIOUS_TAG..HEAD --oneline --grep="^fix" --format="- %s" >> CHANGELOG.md || echo "- 无问题修复" >> CHANGELOG.md
            echo "" >> CHANGELOG.md

            echo "#### ♻️ 代码重构" >> CHANGELOG.md
            git log $PREVIOUS_TAG..HEAD --oneline --grep="^refactor" --format="- %s" >> CHANGELOG.md || echo "- 无代码重构" >> CHANGELOG.md
            echo "" >> CHANGELOG.md

            echo "#### 📝 文档更新" >> CHANGELOG.md
            git log $PREVIOUS_TAG..HEAD --oneline --grep="^docs" --format="- %s" >> CHANGELOG.md || echo "- 无文档更新" >> CHANGELOG.md
            echo "" >> CHANGELOG.md

            echo "#### 🔧 其他变更" >> CHANGELOG.md
            git log $PREVIOUS_TAG..HEAD --oneline --grep="^chore\|^test\|^perf" --format="- %s" >> CHANGELOG.md || echo "- 无其他变更" >> CHANGELOG.md
            echo "" >> CHANGELOG.md

            echo "### 📈 统计信息" >> CHANGELOG.md
            COMMIT_COUNT=$(git rev-list --count $PREVIOUS_TAG..HEAD)
            AUTHOR_COUNT=$(git shortlog -sn $PREVIOUS_TAG..HEAD | wc -l)
            echo "- 📝 提交次数: $COMMIT_COUNT" >> CHANGELOG.md
            echo "- 👥 贡献者: $AUTHOR_COUNT" >> CHANGELOG.md
            echo "- 📅 发布日期: $(date +%Y-%m-%d)" >> CHANGELOG.md
          else
            echo "### 🎉 首次发布" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "这是项目的首次正式发布版本。" >> CHANGELOG.md
          fi

          # 设置输出
          CHANGELOG_CONTENT=$(cat CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 上传变更日志
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md

  # 创建发布
  release:
    name: 创建发布
    runs-on: ubuntu-latest
    needs: [validate, build-and-test, changelog]
    permissions:
      contents: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4

      - name: 创建 GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: ${{ needs.validate.outputs.version }}
          body: ${{ needs.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}

      - name: 上传发布文件
        run: |
          # 安装 GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

          # 上传所有构建产物
          for artifact_dir in release-*; do
            if [ -d "$artifact_dir" ]; then
              for file in "$artifact_dir"/*.{tar.gz,zip}; do
                if [ -f "$file" ]; then
                  echo "上传 $file"
                  gh release upload ${{ needs.validate.outputs.version }} "$file" --clobber
                fi
              done
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 发布后处理
  post-release:
    name: 发布后处理
    runs-on: ubuntu-latest
    needs: [validate, release]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 更新版本号
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          # 更新 version.go 文件
          sed -i "s/Version = \".*\"/Version = \"$VERSION\"/" version.go

          # 提交版本更新
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.go
          git commit -m "chore: bump version to $VERSION" || echo "无需更新版本号"
          git push || echo "推送失败，可能无需更新"

      - name: 发布通知
        run: |
          echo "✅ 版本 ${{ needs.validate.outputs.version }} 发布成功！"
          echo "🔗 发布页面: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }}"