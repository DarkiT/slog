name: 性能测试与基准

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    # 每日凌晨 2 点运行性能测试
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      benchmark_type:
        description: '基准测试类型'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - cache
          - dlp
          - logger
          - modules

env:
  GO_VERSION: '1.23'

jobs:
  # 基准测试
  benchmark:
    name: 基准测试
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test_type: [cache, dlp, logger, integration]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 运行基准测试 - ${{ matrix.test_type }}
        run: |
          case "${{ matrix.test_type }}" in
            "cache")
              go test -bench=BenchmarkLRU -benchmem -run=^$ ./...
              go test -bench=BenchmarkTieredPools -benchmem -run=^$ ./common/
              ;;
            "dlp")
              go test -bench=BenchmarkDLP -benchmem -run=^$ ./dlp/
              go test -bench=BenchmarkDesensitizer -benchmem -run=^$ ./dlp/
              ;;
            "logger")
              go test -bench=BenchmarkLogger -benchmem -run=^$ ./...
              ;;
            "integration")
              go test -bench=. -benchmem -run=^$ ./benchmark/
              ;;
          esac

      - name: 生成基准测试报告
        run: |
          mkdir -p benchmark-results
          case "${{ matrix.test_type }}" in
            "cache")
              go test -bench=BenchmarkLRU -benchmem -run=^$ ./... > benchmark-results/cache-bench.txt
              go test -bench=BenchmarkTieredPools -benchmem -run=^$ ./common/ >> benchmark-results/cache-bench.txt
              ;;
            "dlp")
              go test -bench=BenchmarkDLP -benchmem -run=^$ ./dlp/ > benchmark-results/dlp-bench.txt
              go test -bench=BenchmarkDesensitizer -benchmem -run=^$ ./dlp/ >> benchmark-results/dlp-bench.txt
              ;;
            "logger")
              go test -bench=BenchmarkLogger -benchmem -run=^$ ./... > benchmark-results/logger-bench.txt
              ;;
            "integration")
              cd benchmark && go test -bench=. -benchmem -run=^$ ./... > ../benchmark-results/integration-bench.txt
              ;;
          esac

      - name: 上传基准测试结果
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ matrix.test_type }}
          path: benchmark-results/

  # 性能回归检测
  performance-regression:
    name: 性能回归检测
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 检出代码 (当前分支)
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 运行当前分支基准测试
        run: |
          go test -bench=. -benchmem -count=5 -run=^$ ./... > current-bench.txt

      - name: 检出基线分支
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: 运行基线分支基准测试
        run: |
          go test -bench=. -benchmem -count=5 -run=^$ ./... > baseline-bench.txt

      - name: 安装 benchcmp
        run: go install golang.org/x/tools/cmd/benchcmp@latest

      - name: 比较性能差异
        run: |
          echo "## 性能对比报告" > performance-report.md
          echo "" >> performance-report.md
          echo "### 基准测试对比" >> performance-report.md
          echo '```' >> performance-report.md
          benchcmp baseline-bench.txt current-bench.txt >> performance-report.md || true
          echo '```' >> performance-report.md

      - name: 评论 PR 性能报告
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('performance-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # 压力测试
  stress-test:
    name: 压力测试
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 运行压力测试
        run: |
          # 运行长时间压力测试
          timeout 300s go test -stress -timeout=5m ./... || true

          # 运行内存泄漏检测
          go test -memprofile=mem.prof -bench=. -run=^$ ./...

          # 运行CPU性能分析
          go test -cpuprofile=cpu.prof -bench=. -run=^$ ./...

      - name: 分析性能数据
        run: |
          # 生成内存使用报告
          go tool pprof -text mem.prof > memory-analysis.txt

          # 生成CPU使用报告
          go tool pprof -text cpu.prof > cpu-analysis.txt

      - name: 上传性能分析结果
        uses: actions/upload-artifact@v4
        with:
          name: stress-test-results
          path: |
            memory-analysis.txt
            cpu-analysis.txt
            *.prof

  # 缓存性能专项测试
  cache-performance:
    name: 缓存性能专项测试
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: LRU 缓存性能测试
        run: |
          echo "=== LRU 缓存基准测试 ===" > cache-performance.txt
          go test -bench=BenchmarkLRU -benchmem -benchtime=10s ./common/ >> cache-performance.txt

          echo "" >> cache-performance.txt
          echo "=== 分层池基准测试 ===" >> cache-performance.txt
          go test -bench=BenchmarkTieredPools -benchmem -benchtime=10s ./common/ >> cache-performance.txt

          echo "" >> cache-performance.txt
          echo "=== 缓存集成测试 ===" >> cache-performance.txt
          go test -bench=BenchmarkCache -benchmem -benchtime=10s ./... >> cache-performance.txt

      - name: 生成缓存性能图表
        run: |
          # 使用 Go 的 benchstat 工具分析结果
          go install golang.org/x/perf/cmd/benchstat@latest || true

          # 分析性能趋势（如果有历史数据）
          echo "缓存性能分析完成" >> cache-performance.txt

      - name: 上传缓存性能报告
        uses: actions/upload-artifact@v4
        with:
          name: cache-performance-report
          path: cache-performance.txt